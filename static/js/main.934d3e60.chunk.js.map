{"version":3,"sources":["components/AddItemForm.tsx","components/EditableSpan.tsx","components/Task.tsx","components/Todolist.tsx","state/todolist-reducer.ts","state/tasks-reducer.ts","api/todolist-api.ts","App.tsx","serviceWorker.ts","state/store.ts","index.tsx"],"names":["AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","Task","onChangeTitleHandler","useCallback","newTitle","changeTaskTitle","task","id","todolistID","className","isDone","s","is_done","Checkbox","newIsDoneValue","checked","changeStatus","removeTask","Delete","Todolist","addTask","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","changeTodoListTitle","tasksForTodolist","tasks","filter","t","removeTodoList","map","Button","initialState","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","App","todoLists","useSelector","state","todolists","dispatch","useDispatch","todoListId","action","type","addTodoList","todolistId","v1","addTodolistAC","addTaskAC","taskId","changeTaskStatusAC","removeTaskAC","changeTodolistTitleAC","useEffect","then","res","data","AppBar","position","Toolbar","Typography","Container","fixed","Grid","container","style","padding","spacing","tl","allTodoListTasks","item","Paper","elevation","Boolean","window","location","hostname","match","rootReducer","combineReducers","stateCopy","todoListTasks","forEach","addedDate","order","todoList","find","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.934d3e60.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nconst AddItemForm = React.memo(function (props: AddItemType) {\r\n    const [title, setTitle] = useState(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title)\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required!\")\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null)\r\n            setError(null)\r\n        if (e.key === \"Enter\") {\r\n            addItem()\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                error={!!error}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                label={\"Title\"}\r\n                helperText={error}\r\n            />\r\n            <IconButton\r\n                color={\"primary\"}\r\n                onClick={addItem}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default AddItemForm;\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    onChange: (newTitle: string) => void\r\n}\r\n\r\nconst EditableSpan = React.memo(function (props: EditableSpanType) {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState(\"\")\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    return (\r\n        editMode ?\r\n            <TextField variant={\"outlined\"} onBlur={activateViewMode} value={title} autoFocus\r\n                       onChange={onChangeTitleHandler}/> :\r\n            <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n    );\r\n})\r\n\r\nexport default EditableSpan;\r\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport s from \"../App.module.css\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskType} from \"./Todolist\";\r\n\r\ntype TaskPropsType = {\r\n    changeStatus: (taskId: string, isDone: boolean, todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todoListId: string) => void\r\n    removeTask: (id: string, todoListId: string) => void\r\n    task: TaskType\r\n    todolistID: string\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = () => {\r\n        props.removeTask(props.task.id, props.todolistID)\r\n    }\r\n    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeStatus(props.task.id, newIsDoneValue, props.todolistID)\r\n    }\r\n    const onChangeTitleHandler = useCallback((newTitle: string) => {\r\n        props.changeTaskTitle(props.task.id, newTitle, props.todolistID)\r\n    }, [props])\r\n    return <div key={props.task.id} className={props.task.isDone ? s.is_done : \"\"}>\r\n        <Checkbox\r\n            color={\"primary\"}\r\n            onChange={onChangeStatusHandler}\r\n            checked={props.task.isDone}/>\r\n        <EditableSpan title={props.task.title} onChange={onChangeTitleHandler}/>\r\n        <IconButton onClick={onClickHandler}><Delete/></IconButton>\r\n    </div>\r\n\r\n})","import React, {useCallback} from 'react';\r\nimport {FilterValueType} from \"../App\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    addTask: (title: string, todoListId: string) => void\r\n    removeTodoList: (id: string) => void\r\n    changeFilter: (value: FilterValueType, todoListId: string) => void\r\n    tasks: Array<TaskType>\r\n    filter: FilterValueType\r\n    changeStatus: (taskId: string, isDone: boolean, todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todoListId: string) => void\r\n    removeTask: (id: string, todoListId: string) => void\r\n    changeTodoListTitle: (newTitle: string, todoListId: string) => void\r\n}\r\n\r\nconst Todolist = React.memo(function (props: PropsType) {\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props])\r\n    const onAllClickHandler = useCallback(() => props.changeFilter(\"all\", props.id), [props])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter(\"active\", props.id), [props])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(\"completed\", props.id), [props])\r\n    const removeTodolistHandler = () => props.removeTodoList(props.id)\r\n    const changeTodoListTitle = useCallback((newTitle: string) => {\r\n        props.changeTodoListTitle(newTitle, props.id)\r\n    }, [props])\r\n    let tasksForTodolist = props.tasks\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => !t.isDone)\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone)\r\n    }\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} onChange={changeTodoListTitle}/>\r\n                <IconButton onClick={removeTodolistHandler}><Delete/></IconButton>\r\n            </h3>\r\n\r\n            <AddItemForm addItem={addTask}/>\r\n            <div>\r\n                {tasksForTodolist.map(t => <Task\r\n                        task={t}\r\n                        changeTaskTitle={props.changeTaskTitle}\r\n                        removeTask={props.removeTask}\r\n                        changeStatus={props.changeStatus}\r\n                        todolistID={props.id}\r\n                        key={t.id}\r\n                    />\r\n                )}\r\n            </div>\r\n            <div>\r\n                <Button\r\n                    variant={props.filter === \"all\" ? \"outlined\" : \"text\"}\r\n                    color={\"primary\"}\r\n                    onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button\r\n                    variant={props.filter === \"active\" ? \"outlined\" : \"text\"}\r\n                    color={\"primary\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button\r\n                    variant={props.filter === \"completed\" ? \"outlined\" : \"text\"}\r\n                    color={\"primary\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Todolist;\r\n","import {FilterValueType} from \"../App\"\r\nimport {v1} from \"uuid\";\r\nimport {TodolistType} from \"../api/todolist-api\";\r\n\r\nexport type RemoveTodoListActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\nexport type AddTodoListActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todolistId: string\r\n}\r\ntype ChangeTodoListTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\ntype ChangeTodoListFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    filter: FilterValueType\r\n}\r\nexport type SetTodoListActionType = {\r\n    type: 'SET-TODOLIST'\r\n    todolists: Array<TodolistType>\r\n}\r\ntype ActionsType =\r\n    RemoveTodoListActionType |\r\n    AddTodoListActionType |\r\n    ChangeTodoListTitleActionType |\r\n    ChangeTodoListFilterActionType |\r\n    SetTodoListActionType\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValueType\r\n}\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case'ADD-TODOLIST':\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: \"all\",\r\n                addedDate: '',\r\n                order: 0\r\n            }, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todoList = state.find(tl => tl.id === action.id)\r\n            if (todoList) {\r\n                todoList.title = action.title\r\n\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todoList = state.find(tl => tl.id === action.id)\r\n            if (todoList) {\r\n                todoList.filter = action.filter\r\n            }\r\n            return [...state]\r\n        }\r\n        case \"SET-TODOLIST\": {\r\n            return action.todolists.map(tl => {\r\n                return {\r\n                    ...tl,\r\n                    filter: 'all'\r\n                }\r\n            })\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodoListActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodoListActionType => {\r\n    return {type: 'ADD-TODOLIST', title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodoListTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id, title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValueType): ChangeTodoListFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id, filter}\r\n}\r\nexport const setTodolistAC = (todolists: Array<TodolistDomainType>): SetTodoListActionType => {\r\n    return {type: \"SET-TODOLIST\", todolists}\r\n}\r\n","import {TasksStateType} from \"../App\"\r\nimport {v1} from \"uuid\";\r\nimport {AddTodoListActionType, RemoveTodoListActionType, SetTodoListActionType} from \"./todolist-reducer\";\r\n\r\ntype RemoveTaskActionType = {\r\n    type: \"REMOVE-TASK\"\r\n    id: string\r\n    todolistId: string\r\n}\r\ntype AddTaskActionType = {\r\n    type: \"ADD-TASK\"\r\n    title: string\r\n    todolistId: string\r\n}\r\ntype ChangeTaskStatusActionType = {\r\n    type: \"CHANGE-TASK-STATUS\"\r\n    id: string\r\n    isDone: boolean\r\n    todolistId: string\r\n}\r\ntype ChangeTaskTitleActionType = {\r\n    type: \"CHANGE-TASK-TITLE\"\r\n    id: string\r\n    title: string\r\n    todolistId: string\r\n}\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType |\r\n    ChangeTaskStatusActionType | ChangeTaskTitleActionType |\r\n    AddTodoListActionType | RemoveTodoListActionType | SetTodoListActionType\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\": {\r\n            const stateCopy = {...state}\r\n            const todoListTasks = stateCopy[action.todolistId]\r\n            stateCopy[action.todolistId] = todoListTasks.filter(t => t.id !== action.id)\r\n            return stateCopy\r\n        }\r\n        case \"ADD-TASK\": {\r\n            const stateCopy = {...state}\r\n            const task = {id: v1(), title: action.title, isDone: false}\r\n            const todoListTasks = stateCopy[action.todolistId]\r\n            stateCopy[action.todolistId] = [task, ...todoListTasks]\r\n            return stateCopy\r\n        }\r\n        case \"CHANGE-TASK-STATUS\": {\r\n            const stateCopy = {...state}\r\n            const todoListTasks = stateCopy[action.todolistId]\r\n            stateCopy[action.todolistId] = todoListTasks.map(t => t.id === action.id ? {\r\n                ...t,\r\n                isDone: action.isDone\r\n            } : t)\r\n            return stateCopy\r\n        }\r\n        case \"CHANGE-TASK-TITLE\": {\r\n            const stateCopy = {...state}\r\n            const todoListTasks = stateCopy[action.todolistId]\r\n            stateCopy[action.todolistId] = todoListTasks.map(t => t.id === action.id ? {...t, title: action.title} : t)\r\n            return stateCopy\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = []\r\n            return stateCopy\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        case 'SET-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const removeTaskAC = (id: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: \"REMOVE-TASK\", id, todolistId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return {type: \"ADD-TASK\", title, todolistId}\r\n}\r\n\r\nexport const changeTaskStatusAC = (id: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: \"CHANGE-TASK-STATUS\", id, isDone, todolistId}\r\n}\r\nexport const changeTaskTitleAC = (id: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: \"CHANGE-TASK-TITLE\", id, title, todolistId}\r\n}","import axios from 'axios'\r\nimport {TodolistDomainType} from \"../state/todolist-reducer\";\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\ntype ResponseType<D> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '3999e522-cb4e-4498-8ef3-a2f773a6c74f'\r\n    }\r\n})\r\n\r\nexport const todolistAPI = {\r\n    getTodolist() {\r\n        return instance.get<Array<TodolistDomainType>>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<ResponseType<{}>>(`todo-lists/${todolistId}`, {title: title})\r\n    },\r\n\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport Todolist, {TaskType} from \"./components/Todolist\";\r\nimport AddItemForm from \"./components/AddItemForm\";\r\nimport {AppBar, Container, Grid, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC,\r\n    setTodolistAC,\r\n    TodolistDomainType\r\n} from \"./state/todolist-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {todolistAPI} from \"./api/todolist-api\";\r\n\r\nexport type FilterValueType = \"all\" | \"active\" | \"completed\"\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValueType\r\n}\r\n\r\nfunction App() {\r\n    const todoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    const changeFilter = useCallback((value: FilterValueType, todoListId: string) => {\r\n        const action = changeTodolistFilterAC(todoListId, value)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const addTodoList = useCallback((title: string) => {\r\n        const action = addTodolistAC(title)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const addTask = useCallback((title: string, todoListId: string) => {\r\n        const action = addTaskAC(title, todoListId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const changeStatus = useCallback((taskId: string, isDone: boolean, todoListId: string) => {\r\n        const action = changeTaskStatusAC(taskId, isDone, todoListId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const removeTask = useCallback((id: string, todoListId: string) => {\r\n        const action = removeTaskAC(id, todoListId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const removeTodoList = useCallback((id: string) => {\r\n        const action = removeTodolistAC(id)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const changeTaskTitle = useCallback((taskId: string, newTitle: string, todoListId: string) => {\r\n        const action = changeTaskTitleAC(taskId, newTitle, todoListId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const changeTodoListTitle = useCallback((title: string, id: string) => {\r\n        const action = changeTodolistTitleAC(id, title)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    useEffect(() => {\r\n        todolistAPI.getTodolist().then((res) => dispatch(setTodolistAC(res.data)))\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\">\r\n                        Todolist\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n\r\n                <Grid container spacing={3}>\r\n                    {todoLists.map(tl => {\r\n                        let allTodoListTasks = tasks[tl.id]\r\n                        return (\r\n                            <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}} elevation={3}>\r\n                                    <Todolist\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodoListTasks}\r\n                                        removeTodoList={removeTodoList}\r\n                                        changeFilter={changeFilter}\r\n                                        removeTask={removeTask}\r\n                                        addTask={addTask}\r\n                                        changeStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodoListTitle={changeTodoListTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n// 7. 14\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistReducer} from './todolist-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer);\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}